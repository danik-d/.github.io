import os
import sqlite3
from aiogram import F, Router, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import app.keyboards as kb
from aiogram.types import FSInputFile

router1 = Router()

# Database setup
def setup_database():
    conn = sqlite3.connect('user_ids.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id TEXT NOT NULL
        )
    ''')
    conn.commit()
    conn.close()

setup_database()

# Define states
class RegistrationStates(StatesGroup):
    waiting_for_id = State()
    regvalid = State()

global valid
valid = 0

# State for storing user_id
@router1.message(CommandStart())
async def start(message: Message):
    with open('font.jpg', 'rb') as photo:
            await message.answer_photo(FSInputFile('font.jpg'),
                caption='<b>üíö –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, —è - –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–º–∞–Ω–¥–æ–π <u>WIN SYGNAL</u></b>üíö\n\n–Ø –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ. —á—Ç–æ–±—ã –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã, –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–±–æ –º–Ω–µ —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É "ü§ñ –û –±–æ—Ç–µ".\n\n–ï—Å–ª–∏ –∂–µ —Ç—ã —Ö–æ—á–µ—à—å —Å—Ä–∞–∑—É –∏—Å–ø—ã—Ç–∞—Ç—å –º–µ–Ω—è, —Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "üé≤ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª", –∏ —Ç—ã —É–∑–Ω–∞–µ—à—å, —á—Ç–æ —è –º–æ–≥—É.\n\n–ù–æ –µ—Å–ª–∏ —Ç—ã –Ω–µ –ø–æ–Ω–∏–º–∞–µ—à—å, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –∏ –∫–∞–∫ –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã, —Ç–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—á–∏—Ç–∞–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "üîé –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"',
                parse_mode='html',
                reply_markup=kb.reg
            )
    

@router1.callback_query(F.data == 'getsygnal')
async def manual(callback: CallbackQuery, state: FSMContext):
    with open('manual.jpg', 'rb') as photo2:
        await callback.message.answer(
            '<b>üëå –ò—Ç–∞–∫, –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –ø—Ä–æ–π–¥–µ–º –ø—Ä–æ—Å—Ç—É—é —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏—é –≤ —Å–∏—Å—Ç–µ–º–µ! –ù–µ –ø—É–≥–∞–π—Å—è, —Ç—É—Ç –Ω–∏—á–µ–≥–æ —Å–ª–æ–∂–Ω–æ–≥–æ!</b>\n\n'
            '–í–∫—Ä–∞—Ç—Ü–µ —Å–∫–∞–∂—É, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å: —Ç–µ–±–µ –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ —Å–∞–π—Ç–µ 1win (<I>—ç—Ç–æ —Ç–æ—Ç —Å–∞–º—ã–π —Å–∞–π—Ç —Å –∏–≥—Ä–æ–π, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —è –¥–∞—é —Å–∏–≥–Ω–∞–ª—ã</I>).\n'
            '–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Å–∫–∏–Ω—É—Ç—å ID —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø—Ä—è–º–æ –º–Ω–µ! –ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ - —è –¥–∞–º –∑–Ω–∞—Ç—å.\n\n'
            '–ê –µ—Å–ª–∏ —Ç—ã —É–∂–µ –±—ã–ª –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–æ –º–æ–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–∫–∏–Ω—å —Ç–æ—Ç –∞–π–¥–∏, –∫–æ—Ç–æ—Ä—ã–π —è —É–∂–µ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–ª.',
            parse_mode='html',
            reply_markup=kb.regget
            )
        await callback.message.delete()
    await state.set_state(RegistrationStates.waiting_for_id)


@router1.callback_query(F.data == 'back')
async def start(callback: CallbackQuery):
    with open('font.jpg', 'rb') as photo:
            await callback.message.answer_photo(FSInputFile('font.jpg'),
                caption='<b>üíö –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, —è - –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–º–∞–Ω–¥–æ–π <u>WIN SYGNAL</u></b>üíö\n\n–Ø –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ. —á—Ç–æ–±—ã –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã, –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–±–æ –º–Ω–µ —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É "ü§ñ –û –±–æ—Ç–µ".\n\n–ï—Å–ª–∏ –∂–µ —Ç—ã —Ö–æ—á–µ—à—å —Å—Ä–∞–∑—É –∏—Å–ø—ã—Ç–∞—Ç—å –º–µ–Ω—è, —Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "üé≤ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª", –∏ —Ç—ã —É–∑–Ω–∞–µ—à—å, —á—Ç–æ —è –º–æ–≥—É.\n\n–ù–æ –µ—Å–ª–∏ —Ç—ã –Ω–µ –ø–æ–Ω–∏–º–∞–µ—à—å, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –∏ –∫–∞–∫ –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã, —Ç–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—á–∏—Ç–∞–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "üîé –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"',
                parse_mode='html',
                reply_markup=kb.reg
        )
            await callback.message.delete()                   

@router1.callback_query(F.data == 'manual')
async def manual(callback: CallbackQuery):
    with open('manual.jpg', 'rb') as photo2:
        await callback.message.answer_photo(FSInputFile('manual.jpg'), 
            caption='<b>–ö–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ?</b>\n\n1. –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å <b>–ù–û–í–´–ô</b> –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ 1win, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" —Å–Ω–∏–∑—É. –ò–º–µ–Ω–Ω–æ —Ç–∞–∫ –Ω–∞—à –±–æ—Ç –ø—Ä–∏–≤—è–∂–µ—Ç –≤–∞—Å –∫ –±–∞–∑–µ –∏ –±—É–¥–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã, –ø—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç—å—é 96%!\n\n2. –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç, –≤–∞–º <b>–ù–ï–û–ë–•–û–î–ò–ú–û</b> –ø–æ–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å –Ω–∞ —Å–∞–π—Ç–µ <b>1win</b>. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—É–º–º–∞ - –æ—Ç <u>3.000 —Ä—É–±–ª–µ–π</u>, –ø–æ—Ç–æ–º—É —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç —ç—Ç–æ–π<b> —Å—É–º–º—ã</b> —Å–∏–≥–Ω–∞–ª—ã –±—É–¥—É—Ç <b>–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ</b> —Ç–æ—á–Ω—ã–µ! \n\n3. –í–∞–º –Ω—É–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à <b>ID</b> —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –≤ <b>–¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º</b>.\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç–æ–º, –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∞–π–¥–∏ –Ω–∞–ø–∏—Å–∞–Ω–æ —Ç—É—Ç - @wsinstr\n\n–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —ç—Ç–∏—Ö —à–∞–≥–æ–≤ –≤–∞–º –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –∏ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã.',
            parse_mode='html',
            reply_markup=kb.manual
            )
        await callback.message.delete()

@router1.callback_query(F.data == 'info')
async def info(callback: CallbackQuery):
    await callback.message.answer(
        'üíö <b>–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—à—å—Å—è –º–Ω–æ–π! –í–æ—Ç, —á—Ç–æ –æ–±–æ –º–Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏ –º–æ–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–∏:</b>\n\n'
        '<I>üß¨ –≠—Ç–æ–≥–æ –±–æ—Ç–∞ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∞ –∫–æ–º–∞–Ω–¥–∞ WINSYGNAL –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ 4-—ë—Ö –º–µ—Å—è—Ü–µ–≤</I>\n\n<I>üß¨ –ë–æ—Ç –≤—ã–¥–∞—ë—Ç —Å–∏–≥–Ω–∞–ª—ã, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ 2-e –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ - <U>Midjourney</U> –∏ <U>TensorFlow</U>.</I>'
        '\n\n<b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç "<I>–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?</I>". –í –±–æ—Ç–∞ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ 3-—ë—Ö –º–µ—Å—è—Ü–µ–≤ –∑–∞–≥—Ä—É–∂–∞–ª–∏—Å—å –∫–æ–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∏–≥—Ä—ã MINES. –í—Å–µ–≥–æ –∫–æ–æ–º–±–∏–Ω–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã—Ö –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –±–æ—Ç ~ 117.000. –ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —Å–∏–≥–Ω–∞–ª!</b>\n\n'
        'üìä <b>–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–æ—á–Ω–æ—Å—Ç—å –±–æ—Ç–∞ —Å–æ—Å—Ç–æ–≤–ª—è–µ—Ç </b>- <I>95%</I>',
        parse_mode='html',
        reply_markup=kb.info
        )
    await callback.message.delete()



@router1.message(Command('getid'))
async def get_id(message: Message):
    # Extract the user ID from the message
    user_id = message.text.split(' ', 1)
    if len(user_id) > 1:
        user_id_value = user_id[1]
        # Save to the database
        conn = sqlite3.connect('user_ids.db')
        cursor = conn.cursor()
        cursor.execute('INSERT INTO users (user_id) VALUES (?)', (user_id_value,))
        conn.commit()
        conn.close()
        await message.answer(f'‚úÖ –í–∞—à ID {user_id_value} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!')
    else:
        await message.answer('‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à ID –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã')

@router1.message(RegistrationStates.waiting_for_id)
async def process_id_input(message: Message, state: FSMContext):
    user_id_value = message.text.strip()
    
    # Check if the input is numeric
    if not user_id_value.isdigit():
        await message.answer('‚ùóÔ∏è –û –Ω–µ—Ç, –∫–∞–∂–µ—Ç—Å—è–ë —Ç—ã –ø—ã—Ç–∞–µ—à—å—Å—è –º–µ–Ω—è –æ–±–º–∞–Ω—É—Ç—å! –í–≤–µ–¥–∏ —Å–≤–æ–π –Ω–∞—Å—Ç–æ—è—â–∏–π ID:')
        return

    # Check if the ID exists in the database
    conn = sqlite3.connect('user_ids.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id_value,))
    result = cursor.fetchone()
    conn.close()

    if result:
        # User is registered
        await message.answer(f'<b>üî• –û—Ç–ª–∏—á–Ω–æ, –º–æ–ª–æ–¥–µ—Ü! \n\nüîë –¢–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç: <I>{user_id_value}</I> —è —É–∂–µ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–ª –≤ —Å–∏—Å—Ç–µ–º–µ. \n\n–¢–µ–ø–µ—Ä—å —è –≥–æ—Ç–æ–≤ –¥–∞—Ç—å —Ç–µ–±–µ —Å–∏–≥–Ω–∞–ª! –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É üëáüèª</b>', parse_mode='html', reply_markup=kb.app)
        await state.clear()  # Clear the state
        valid = 0
    else:
        await message.answer('‚ùóÔ∏è –ö–∞–∂–µ—Ç—Å—è —Ç—ã —Å–¥–µ–ª–∞–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –º–æ–µ–º—É —Å–æ–∑–¥–∞—Ç–µ–ª—é - @grad_money')

@router1.message(Command('getlink'))
async def update_link(message: Message):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    new_link = message.text.split(' ', 1)
    
    if len(new_link) > 1:
        new_link_value = new_link[1] 
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        kb.reg.inline_keyboard[0][0].url = new_link_value
        
        await message.answer('‚úÖ –°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!')
    else:
        await message.answer('‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã')